  #version 430

  layout(std430, binding = 0) buffer Pos{ vec2 Positions[]; };
  layout(std430, binding = 1) buffer Neigh { uint Neighbours[]; };
  layout(std430, binding = 2) buffer Ind { uint Indices[]; };
  layout(std430, binding = 3) buffer Prob { float Probabilities[]; };
  layout(std430, binding = 4) buffer Fiel { vec4 Fields[]; };
  layout(std430, binding = 5) buffer Grad { vec2 Gradients[]; };
  layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

  const uint group_size = 64;
  shared vec2 sum_positive_red[group_size];

  //layout(rg32f) uniform image2D point_tex;

  layout (push_constant) uniform ForcesPushConstants {
    //float f_num_points; 
    float exaggeration;
    float sum_Q; 
    uint num_points;
  } pc;


  void main() {

    uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
    uint groupSize = gl_WorkGroupSize.x;
    uint lid = gl_LocalInvocationID.x;

    float inv_num_points = 1.0 / float(pc.num_points);
    float inv_sum_Q = 1.0 / pc.sum_Q;
    //uint num_points = uint(pc.f_num_points);
    if (i >= pc.num_points)
      return;

    // Get the point coordinates
    vec2 point_i = Positions[i];

    //computing positive forces
    vec2 sum_positive = vec2(0);

    uint index = Indices[2*i]; // offset to start of nn list - in Neighbours
    uint size = Indices[2*i + 1]; // length of nn list

    vec2 positive_force = vec2(0);
    // for all the (size) nearest neighbours
    for (uint j = lid; j < size; j += group_size) {
      // Get other point coordinates
      vec2 point_j = Positions[Neighbours[index + j]];

      // Calculate 2D distance between the two points
      vec2 dist = point_i - point_j;

      // Similarity measure of the two points - https://arxiv.org/pdf/1805.10817 Eq 5
      float qij = 1 / (1 + dist.x*dist.x + dist.y*dist.y);

      // Calculate the attractive force  - https://arxiv.org/pdf/1805.10817 Eq 12
      positive_force += Probabilities[index + j] * qij * dist * inv_num_points;
    }

  
    // Reduce add sum_positive_red to a single value
    if (lid >= 32) {
      sum_positive_red[lid - 32] = positive_force;
    }
    barrier();
    if (lid < 32) {
      sum_positive_red[lid] += positive_force;
    }
    for (uint reduceSize = group_size/4; reduceSize > 1; reduceSize /= 2)
    {
      barrier();
      if (lid < reduceSize) {
        sum_positive_red[lid] += sum_positive_red[lid + reduceSize];
      }
    }
    barrier();
    if (lid < 1) {
      sum_positive = sum_positive_red[0] + sum_positive_red[1];

      // Computing repulsive forces - https://arxiv.org/pdf/1805.10817 Eq 14
      vec2 sum_negative = Fields[i].yz * inv_sum_Q;

      Gradients[i] = 4 * (pc.exaggeration * sum_positive - sum_negative);
    }
  }